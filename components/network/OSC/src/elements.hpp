////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020 Dimitry Ishenko
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com
//
// Distributed under the GNU GPL license. See the LICENSE.md file for details.

////////////////////////////////////////////////////////////////////////////////
#ifndef OSC_ELEMENTS_HPP
#define OSC_ELEMENTS_HPP

////////////////////////////////////////////////////////////////////////////////
#include "element.hpp"
#include "elements_0.hpp"

////////////////////////////////////////////////////////////////////////////////
namespace osc
{

////////////////////////////////////////////////////////////////////////////////
template<typename... Ts>
bool elements::are() const
{
    return size() == sizeof...(Ts) && are_<0, Ts...>();
}

////////////////////////////////////////////////////////////////////////////////
template<std::size_t n, typename T, typename... Us>
constexpr inline bool elements::are_() const
{
    if constexpr (sizeof...(Us))
        return (*this)[n].is<T>() && are_<n+1, Us...>();
    else return (*this)[n].is<T>();
}

////////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
#endif
